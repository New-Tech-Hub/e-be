import { ImgHTMLAttributes, useState } from 'react';

interface OptimizedImageProps extends ImgHTMLAttributes<HTMLImageElement> {
  src: string;
  alt: string;
  width?: string | number;
  height?: string | number;
  priority?: boolean;
  sizes?: string;
}

const OptimizedImage = ({ 
  src, 
  alt, 
  width, 
  height, 
  priority = false, 
  sizes,
  className,
  ...props 
}: OptimizedImageProps) => {
  const [imgSrc, setImgSrc] = useState(src);
  const [hasError, setHasError] = useState(false);

  // Generate WebP source path for local images
  const getWebPSrc = (originalSrc: string) => {
    if (originalSrc.includes('unsplash.com')) {
      return `${originalSrc}${originalSrc.includes('?') ? '&' : '?'}fm=webp&q=80`;
    }
    // For local images, try WebP version (will be generated by build process)
    // Check for both /assets/ path and imported assets
    if (originalSrc.startsWith('/assets/') || originalSrc.includes('/assets/') || originalSrc.startsWith('./assets/')) {
      return originalSrc.replace(/\.(jpg|jpeg|png)$/i, '.webp');
    }
    return null;
  };

  const handleError = () => {
    if (!hasError) {
      setHasError(true);
      setImgSrc(src);
    }
  };

  const webpSrc = getWebPSrc(src);

  // Use picture element for WebP support with fallback
  if (webpSrc && !hasError) {
    return (
      <picture>
        <source srcSet={webpSrc} type="image/webp" sizes={sizes} />
        <img
          src={imgSrc}
          alt={alt}
          className={className}
          loading={priority ? "eager" : "lazy"}
          decoding="async"
          width={width}
          height={height}
          sizes={sizes}
          onError={handleError}
          fetchPriority={priority ? "high" : "auto"}
          {...props}
        />
      </picture>
    );
  }

  return (
    <img
      src={imgSrc}
      alt={alt}
      className={className}
      loading={priority ? "eager" : "lazy"}
      decoding="async"
      width={width}
      height={height}
      sizes={sizes}
      onError={handleError}
      fetchPriority={priority ? "high" : "auto"}
      {...props}
    />
  );
};

export default OptimizedImage;